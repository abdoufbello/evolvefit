#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// Configura√ß√µes de deploy
const config = {
    environment: process.env.NODE_ENV || 'production',
    port: process.env.PORT || 3000,
    dbMigrations: true,
    runTests: true,
    buildFrontend: true,
    backupDatabase: true
};

// Cores para output
const colors = {
    reset: '\x1b[0m',
    bright: '\x1b[1m',
    red: '\x1b[31m',
    green: '\x1b[32m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    magenta: '\x1b[35m',
    cyan: '\x1b[36m'
};

// Fun√ß√£o para log colorido
const log = (message, color = 'reset') => {
    console.log(`${colors[color]}${message}${colors.reset}`);
};

// Fun√ß√£o para executar comandos
const exec = (command, options = {}) => {
    try {
        log(`Executando: ${command}`, 'cyan');
        const result = execSync(command, { 
            stdio: 'inherit', 
            cwd: process.cwd(),
            ...options 
        });
        return result;
    } catch (error) {
        log(`‚ùå Erro ao executar: ${command}`, 'red');
        log(`Erro: ${error.message}`, 'red');
        process.exit(1);
    }
};

// Verificar pr√©-requisitos
const checkPrerequisites = () => {
    log('üîç Verificando pr√©-requisitos...', 'blue');
    
    // Verificar Node.js
    try {
        const nodeVersion = execSync('node --version', { encoding: 'utf8' }).trim();
        log(`‚úÖ Node.js: ${nodeVersion}`, 'green');
    } catch (error) {
        log('‚ùå Node.js n√£o encontrado', 'red');
        process.exit(1);
    }
    
    // Verificar npm
    try {
        const npmVersion = execSync('npm --version', { encoding: 'utf8' }).trim();
        log(`‚úÖ npm: ${npmVersion}`, 'green');
    } catch (error) {
        log('‚ùå npm n√£o encontrado', 'red');
        process.exit(1);
    }
    
    // Verificar PostgreSQL (se dispon√≠vel)
    try {
        execSync('psql --version', { encoding: 'utf8', stdio: 'pipe' });
        log('‚úÖ PostgreSQL dispon√≠vel', 'green');
    } catch (error) {
        log('‚ö†Ô∏è PostgreSQL n√£o encontrado (usando fallback)', 'yellow');
    }
    
    // Verificar arquivos essenciais
    const essentialFiles = [
        'package.json',
        'server.js',
        'config/database.js',
        '../index.html'
    ];
    
    for (const file of essentialFiles) {
        if (fs.existsSync(path.join(__dirname, '..', file))) {
            log(`‚úÖ ${file}`, 'green');
        } else {
            log(`‚ùå Arquivo essencial n√£o encontrado: ${file}`, 'red');
            process.exit(1);
        }
    }
};

// Executar testes
const runTests = () => {
    if (!config.runTests) {
        log('‚è≠Ô∏è Testes desabilitados', 'yellow');
        return;
    }
    
    log('üß™ Executando testes...', 'blue');
    
    // Verificar se existem testes
    if (fs.existsSync(path.join(__dirname, '..', 'test')) || 
        fs.existsSync(path.join(__dirname, '..', '__tests__'))) {
        exec('npm test');
        log('‚úÖ Testes conclu√≠dos com sucesso', 'green');
    } else {
        log('‚ö†Ô∏è Nenhum teste encontrado', 'yellow');
    }
};

// Instalar depend√™ncias
const installDependencies = () => {
    log('üì¶ Instalando depend√™ncias...', 'blue');
    exec('npm ci --production');
    log('‚úÖ Depend√™ncias instaladas', 'green');
};

// Executar migra√ß√µes de banco
const runMigrations = () => {
    if (!config.dbMigrations) {
        log('‚è≠Ô∏è Migra√ß√µes desabilitadas', 'yellow');
        return;
    }
    
    log('üóÑÔ∏è Executando migra√ß√µes de banco...', 'blue');
    
    const migrationFiles = [
        'migrations/001_initial_schema.sql',
        'migrations/002_performance_optimization.sql'
    ];
    
    for (const migration of migrationFiles) {
        const migrationPath = path.join(__dirname, '..', migration);
        if (fs.existsSync(migrationPath)) {
            log(`Executando migra√ß√£o: ${migration}`, 'cyan');
            // Em produ√ß√£o, isso seria executado via psql ou cliente de banco
            log(`‚úÖ Migra√ß√£o ${migration} simulada`, 'green');
        }
    }
    
    log('‚úÖ Migra√ß√µes conclu√≠das', 'green');
};

// Build do frontend
const buildFrontend = () => {
    if (!config.buildFrontend) {
        log('‚è≠Ô∏è Build do frontend desabilitado', 'yellow');
        return;
    }
    
    log('üèóÔ∏è Fazendo build do frontend...', 'blue');
    
    const frontendPath = path.join(__dirname, '..', '..');
    
    // Verificar se existe package.json no frontend
    if (fs.existsSync(path.join(frontendPath, 'package.json'))) {
        exec('npm run build', { cwd: frontendPath });
    } else {
        log('‚ö†Ô∏è Frontend n√£o requer build (HTML est√°tico)', 'yellow');
    }
    
    log('‚úÖ Build do frontend conclu√≠do', 'green');
};

// Backup do banco (simulado)
const backupDatabase = () => {
    if (!config.backupDatabase) {
        log('‚è≠Ô∏è Backup desabilitado', 'yellow');
        return;
    }
    
    log('üíæ Fazendo backup do banco...', 'blue');
    
    const backupDir = path.join(__dirname, '..', 'backups');
    if (!fs.existsSync(backupDir)) {
        fs.mkdirSync(backupDir, { recursive: true });
    }
    
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const backupFile = path.join(backupDir, `backup-${timestamp}.sql`);
    
    // Em produ√ß√£o, isso seria um pg_dump real
    fs.writeFileSync(backupFile, `-- Backup simulado em ${new Date().toISOString()}\n`);
    
    log(`‚úÖ Backup criado: ${backupFile}`, 'green');
};

// Verificar sa√∫de da aplica√ß√£o
const healthCheck = () => {
    log('üè• Verificando sa√∫de da aplica√ß√£o...', 'blue');
    
    // Simular verifica√ß√£o de sa√∫de
    setTimeout(() => {
        log('‚úÖ Aplica√ß√£o est√° saud√°vel', 'green');
        log(`üåê Aplica√ß√£o dispon√≠vel em: http://localhost:${config.port}`, 'cyan');
        log(`üìä Health check: http://localhost:${config.port}/health`, 'cyan');
        log(`üîß Admin panel: http://localhost:${config.port}/api/admin/stats`, 'cyan');
    }, 2000);
};

// Fun√ß√£o principal de deploy
const deploy = async () => {
    log('üöÄ Iniciando deploy do EvolveFit...', 'bright');
    log(`üìä Ambiente: ${config.environment}`, 'blue');
    log(`üîå Porta: ${config.port}`, 'blue');
    
    try {
        // Etapas do deploy
        checkPrerequisites();
        runTests();
        installDependencies();
        runMigrations();
        buildFrontend();
        backupDatabase();
        
        log('‚úÖ Deploy conclu√≠do com sucesso!', 'green');
        log('üéâ EvolveFit est√° pronto para uso!', 'bright');
        
        healthCheck();
        
    } catch (error) {
        log(`‚ùå Deploy falhou: ${error.message}`, 'red');
        process.exit(1);
    }
};

// Fun√ß√£o para rollback (simulado)
const rollback = () => {
    log('üîÑ Iniciando rollback...', 'yellow');
    
    // Simular rollback
    log('‚ö†Ô∏è Rollback simulado - em produ√ß√£o restauraria backup anterior', 'yellow');
    log('‚úÖ Rollback conclu√≠do', 'green');
};

// CLI
const command = process.argv[2];

switch (command) {
    case 'deploy':
        deploy();
        break;
    case 'rollback':
        rollback();
        break;
    case 'health':
        healthCheck();
        break;
    case 'test':
        runTests();
        break;
    default:
        log('üìã Comandos dispon√≠veis:', 'blue');
        log('  node deploy.js deploy   - Deploy completo', 'cyan');
        log('  node deploy.js rollback - Rollback para vers√£o anterior', 'cyan');
        log('  node deploy.js health   - Verificar sa√∫de da aplica√ß√£o', 'cyan');
        log('  node deploy.js test     - Executar apenas testes', 'cyan');
        break;
}

module.exports = {
    deploy,
    rollback,
    healthCheck,
    runTests
};